import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { prisma } from '@/lib/prisma';

export async function GET(request: NextRequest) {
  try {
    const { userId } = auth();
    
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Get user statistics
    const [
      jobsCount,
      candidatesCount,
      competenceFilesCount,
      projectsCount,
      recentActivity
    ] = await Promise.all([
      // Total jobs in system (since no createdBy field exists)
      prisma.job.count(),
      
      // Total candidates in system (since no createdBy field exists)
      prisma.candidate.count(),
      
      // Competence files generated by this user
      prisma.competenceFile.count({
        where: { generatedBy: userId }
      }),
      
      // Total projects in system (since no createdBy field exists)
      prisma.project.count(),
      
      // Recent activity (last 30 days)
      prisma.competenceFile.findMany({
        where: {
          generatedBy: userId,
          createdAt: {
            gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days
          }
        },
        take: 5,
        orderBy: { createdAt: 'desc' },
        include: {
          candidate: {
            select: {
              firstName: true,
              lastName: true
            }
          }
        }
      })
    ]);

    // Calculate this month's activity
    const thisMonthStart = new Date();
    thisMonthStart.setDate(1);
    thisMonthStart.setHours(0, 0, 0, 0);

    const [
      jobsThisMonth,
      candidatesThisMonth,
      competenceFilesThisMonth
    ] = await Promise.all([
      prisma.job.count({
        where: {
          createdAt: { gte: thisMonthStart }
        }
      }),
      
      prisma.candidate.count({
        where: {
          createdAt: { gte: thisMonthStart }
        }
      }),
      
      prisma.competenceFile.count({
        where: {
          generatedBy: userId,
          createdAt: { gte: thisMonthStart }
        }
      })
    ]);

    // Get total downloads for user's competence files
    const totalDownloads = await prisma.competenceFile.aggregate({
      where: { generatedBy: userId },
      _sum: { downloadCount: true }
    });

    return NextResponse.json({
      success: true,
      data: {
        overview: {
          jobsCreated: jobsCount,
          candidatesCreated: candidatesCount,
          competenceFilesGenerated: competenceFilesCount,
          projectsCreated: projectsCount,
          totalDownloads: totalDownloads._sum.downloadCount || 0
        },
        thisMonth: {
          jobsCreated: jobsThisMonth,
          candidatesCreated: candidatesThisMonth,
          competenceFilesGenerated: competenceFilesThisMonth
        },
        recentActivity: recentActivity.map(file => ({
          id: file.id,
          fileName: file.fileName,
          candidateName: file.candidate ? `${file.candidate.firstName} ${file.candidate.lastName}` : 'Unknown',
          createdAt: file.createdAt,
          status: file.status
        }))
      }
    });

  } catch (error) {
    console.error('Error fetching user stats:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to fetch user statistics' },
      { status: 500 }
    );
  }
} 