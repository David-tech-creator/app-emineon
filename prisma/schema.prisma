// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  candidates        Candidate[]
  competenceFiles   CompetenceFile[]
  templates         Template[]
  jobs              Job[]

  @@map("users")
}

model Candidate {
  id                 String    @id @default(cuid())
  fullName           String
  currentTitle       String
  email              String?
  phone              String?
  location           String?
  photo              String?
  yearsOfExperience  Int?
  summary            String?
  skills             String[]
  certifications     String[]
  education          String[]
  languages          String[]
  linkedinUrl        String?
  portfolioUrl       String?
  cvFilePath         String?
  status             CandidateStatus @default(ACTIVE)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  userId             String
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
  experience         Experience[]
  competenceFiles    CompetenceFile[]
  applications       Application[]

  @@map("candidates")
}

model Experience {
  id               String   @id @default(cuid())
  company          String
  title            String
  startDate        String
  endDate          String
  responsibilities String
  location         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  candidateId      String
  candidate        Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  colorHex    String
  font        String
  client      String?
  footerText  String?
  logoUrl     String?
  sections    Json     // Array of section configurations
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId          String
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  competenceFiles CompetenceFile[]

  @@map("templates")
}

model CompetenceFile {
  id           String            @id @default(cuid())
  fileName     String
  filePath     String
  format       FileFormat
  fileSize     Int
  downloadUrl  String
  customization Json            // Styling customization data
  sections     Json             // Section configuration
  status       FileStatus       @default(GENERATED)
  generatedAt  DateTime         @default(now())
  expiresAt    DateTime?
  downloadCount Int             @default(0)
  lastDownloadAt DateTime?

  // Relations
  candidateId  String
  candidate    Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  templateId   String
  template     Template @relation(fields: [templateId], references: [id])
  userId       String
  user         User @relation(fields: [userId], references: [id])

  @@map("competence_files")
}

model Job {
  id              String       @id @default(cuid())
  title           String
  company         String
  description     String
  requirements    String[]
  skills          String[]
  location        String?
  remote          Boolean      @default(false)
  contractType    ContractType
  salaryMin       Int?
  salaryMax       Int?
  currency        String       @default("CHF")
  urgent          Boolean      @default(false)
  status          JobStatus    @default(ACTIVE)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  expiresAt       DateTime?

  // Relations
  userId          String
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications    Application[]

  @@map("jobs")
}

model Application {
  id          String            @id @default(cuid())
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
  notes       String?
  
  // Relations
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobId       String
  job         Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([candidateId, jobId])
  @@map("applications")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum CandidateStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum FileFormat {
  PDF
  DOCX
}

enum FileStatus {
  GENERATING
  GENERATED
  FAILED
  EXPIRED
}

enum ContractType {
  PERMANENT
  FREELANCE
  FIXED_TERM
  INTERNSHIP
}

enum JobStatus {
  ACTIVE
  PAUSED
  CLOSED
  DRAFT
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  INTERVIEWING
  OFFERED
  HIRED
  REJECTED
}
