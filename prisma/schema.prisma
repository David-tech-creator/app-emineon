generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id                    String            @id @default(cuid())
  email                 String            @unique
  createdAt             DateTime          @default(now())
  archived              Boolean           @default(false)
  availableFrom         DateTime?
  certifications        String[]
  companies             Json?
  conversionStatus      ConversionStatus?
  culturalFitScore      Float?
  currentLocation       String?
  currentTitle          String?
  degrees               String[]
  educationLevel        EducationLevel?
  expectedSalary        String?
  experienceYears       Int?
  frameworks            String[]
  freelancer            Boolean?          @default(false)
  functionalDomain      String?
  githubUrl             String?
  graduationYear        Int?
  interviewScores       Json?
  lastUpdated           DateTime
  linkedinUrl           String?
  matchingScore         Float?
  methodologies         String[]
  motivationalFitNotes  String?
  nationality           String?
  notableProjects       String[]
  phone                 String?
  portfolioUrl          String?
  preferredContractType ContractType?
  primaryIndustry       String?
  professionalHeadline  String?
  profileToken          String?           @unique
  programmingLanguages  String[]
  recruiterNotes        String[]
  referees              Json?
  relocationWillingness Boolean?          @default(false)
  remotePreference      RemotePreference?
  seniorityLevel        SeniorityLevel?
  softSkills            String[]
  source                String?
  spokenLanguages       String[]
  status                CandidateStatus   @default(NEW)
  summary               String?
  tags                  String[]
  technicalSkills       String[]
  timezone              String?
  toolsAndPlatforms     String[]
  universities          String[]
  videoInterviewUrl     String?
  
  // Video presentation fields for client portal
  videoUrl              String? // Short video introduction/pitch
  videoThumbnailUrl     String?
  videoDuration         Int? // Duration in seconds
  videoTitle            String?
  videoDescription      String?
  videoUploadedAt       DateTime?
  
  // Professional competence files for client portal
  competenceFileUrl     String? // Client-facing professional CV
  competenceFileType    String? // pdf, docx, etc.
  competenceFileUploadedAt DateTime?
  
  workPermitType        String?
  firstName             String
  lastName              String
  ai_matches            ai_matches[]
  applications          Application[]
  assessments           assessments[]
  evaluations           evaluations[]
  interviews            interviews[]
  referrals             referrals[]
  sms_messages          sms_messages[]
  clientComments        ClientComment[]
  clientRating          Int?
  candidateAssessments  CandidateAssessment[]
  interviewRequests     InterviewRequest[]
  collaborationNotes    String?
  clientVisible         Boolean          @default(true)
  shareWithClient       DateTime?

  @@map("candidates")
}

model Job {
  id                 String               @id @default(cuid())
  title              String
  description        String
  department         String
  location           String
  language           Language             @default(EN)
  status             JobStatus            @default(DRAFT)
  salaryMin          Int?
  salaryMax          Int?
  salaryCurrency     String?              @default("USD")
  experienceLevel    String?
  benefits           String[]
  requirements       String[]
  responsibilities   String[]
  isRemote           Boolean              @default(false)
  publicToken        String?              @unique
  embedCode          String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  publishedAt        DateTime?
  expiresAt          DateTime?
  employmentType     String[]
  ai_matches         ai_matches[]
  applications       Application[]
  interviews         interviews[]
  job_distributions  job_distributions[]
  social_media_posts social_media_posts[]
  clientComments      ClientComment[]
  assessmentRequirements ClientAssessmentRequirement[]
  candidateAssessments   CandidateAssessment[]
  interviewRequests   InterviewRequest[]

  @@index([expiresAt])
  @@index([publishedAt])
  @@index([status, department])
  @@index([status, isRemote])
  @@index([status, language])
  @@index([status, location])
  @@index([status, publishedAt])
  @@map("jobs")
}

model Application {
  id           String            @id @default(cuid())
  candidateId  String
  jobId        String
  status       ApplicationStatus @default(PENDING)
  coverLetter  String?
  cvUrl        String?
  referralCode String?
  source       String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime
  candidate    Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job          Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([candidateId, jobId])
  @@map("applications")
}

model ai_matches {
  id          String    @id
  jobId       String
  candidateId String
  score       Float
  reasoning   String?
  factors     Json?
  createdAt   DateTime  @default(now())
  candidates  Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobs        Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, candidateId])
}

model assessments {
  id          String           @id
  candidateId String
  type        AssessmentType
  questions   Json
  answers     Json?
  score       Float?
  maxScore    Float
  status      AssessmentStatus @default(NOT_STARTED)
  startedAt   DateTime?
  completedAt DateTime?
  expiresAt   DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime
  candidates  Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model calendar_integrations {
  id           String           @id
  userId       String           @unique
  provider     CalendarProvider
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime
}

model evaluations {
  id          String    @id
  candidateId String
  evaluatorId String
  rating      Float
  notes       String?
  criteria    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  candidates  Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model interviews {
  id                String          @id
  candidateId       String
  jobId             String
  interviewerId     String
  type              InterviewType
  status            InterviewStatus @default(SCHEDULED)
  scheduledAt       DateTime
  duration          Int
  location          String?
  videoInterviewUrl String?
  notes             String?
  rating            Float?
  calendarEventId   String?
  meetingLink       String?
  dialInDetails     String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  candidates        Candidate       @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobs              Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model job_distributions {
  id           String             @id
  jobId        String
  platform     String
  status       DistributionStatus
  externalId   String?
  postUrl      String?
  cost         Float?
  postedAt     DateTime?
  expiresAt    DateTime?
  errorCode    String?
  errorMessage String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime
  jobs         Job                @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model logs {
  id        String   @id
  actor     String?
  action    String
  resource  String
  details   Json?
  level     LogLevel @default(INFO)
  timestamp DateTime @default(now())
}

model referrals {
  id           String         @id
  candidateId  String
  referrerId   String
  referrerName String
  code         String         @unique
  isUsed       Boolean        @default(false)
  reward       Float?
  status       ReferralStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  candidates   Candidate      @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model sms_messages {
  id          String       @id
  candidateId String
  phoneNumber String
  message     String
  status      SmsStatus    @default(PENDING)
  direction   SmsDirection
  externalId  String?
  errorCode   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  candidates  Candidate    @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model social_media_posts {
  id        String         @id
  jobId     String
  platform  SocialPlatform
  content   String
  status    PostStatus
  postUrl   String?
  postId    String?
  createdAt DateTime       @default(now())
  updatedAt DateTime
  jobs      Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model workflow_rules {
  id         String   @id
  name       String
  trigger    String
  conditions Json
  actions    Json
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

enum CandidateStatus {
  NEW
  ACTIVE
  PASSIVE
  DO_NOT_CONTACT
  BLACKLISTED
}

enum ContractType {
  PERMANENT
  FREELANCE
  FIXED_TERM
  CONTRACT
  INTERNSHIP
}

enum JobStatus {
  DRAFT
  ACTIVE
  PAUSED
  CLOSED
  ARCHIVED
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  INTERVIEW_SCHEDULED
  INTERVIEWED
  OFFER_EXTENDED
  HIRED
  REJECTED
  WITHDRAWN
}

enum AssessmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  EXPIRED
  CANCELLED
  PENDING
}

enum AssessmentType {
  TECHNICAL
  PERSONALITY
  COGNITIVE
  SKILLS_BASED
  CUSTOM
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
  APPLE
}

enum ConversionStatus {
  IN_PIPELINE
  PLACED
  REJECTED
  WITHDRAWN
  ON_HOLD
}

enum DataSource {
  MANUAL
  LINKEDIN
  INDEED
  GLASSDOOR
  REFERRAL
  WEBSITE
  API_IMPORT
  BULK_UPLOAD
  AI_SOURCED
}

enum DistributionStatus {
  PENDING
  POSTED
  FAILED
  EXPIRED
  REMOVED
}

enum EducationLevel {
  HIGH_SCHOOL
  ASSOCIATE
  BACHELOR
  MASTER
  PHD
  CERTIFICATION
  BOOTCAMP
  SELF_TAUGHT
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
  TEMPORARY
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum InterviewType {
  PHONE_SCREENING
  TECHNICAL
  BEHAVIORAL
  FINAL
  VIDEO_ONE_WAY
}

enum Language {
  EN
  ES
  FR
  DE
  PT
  IT
  NL
  PL
  RU
  ZH
  JA
  KO
}

enum LogLevel {
  INFO
  WARN
  ERROR
  DEBUG
}

enum NoticePeriod {
  IMMEDIATE
  ONE_WEEK
  TWO_WEEKS
  ONE_MONTH
  TWO_MONTHS
  THREE_MONTHS
  SIX_MONTHS
  OTHER
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ReferralStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum RemotePreference {
  REMOTE
  HYBRID
  ONSITE
  FLEXIBLE
}

enum SalaryType {
  ANNUAL
  MONTHLY
  DAILY
  HOURLY
}

enum SeniorityLevel {
  INTERN
  JUNIOR
  MID_LEVEL
  SENIOR
  LEAD
  PRINCIPAL
  ARCHITECT
  DIRECTOR
  VP
  C_LEVEL
}

enum SmsDirection {
  OUTBOUND
  INBOUND
}

enum SmsStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  REPLIED
}

enum SocialPlatform {
  LINKEDIN
  TWITTER
  FACEBOOK
  INSTAGRAM
}

enum TravelWillingness {
  NONE
  OCCASIONAL
  FREQUENT
  EXTENSIVE
  INTERNATIONAL
}

enum WorkAuthStatus {
  CITIZEN
  PERMANENT_RESIDENT
  WORK_VISA
  STUDENT_VISA
  REQUIRES_SPONSORSHIP
  NOT_AUTHORIZED
}

enum WorkSchedule {
  FULL_TIME
  PART_TIME
  FLEXIBLE
  SHIFT_WORK
  COMPRESSED
  JOB_SHARE
}

model ClientPortalInvitation {
  id           String   @id @default(cuid())
  clientId     String
  email        String
  role         ClientPortalRole @default(VIEWER)
  token        String   @unique
  expiresAt    DateTime
  acceptedAt   DateTime?
  invitedBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  inviter      User     @relation(fields: [invitedBy], references: [id])

  @@map("client_portal_invitations")
}

enum ClientPortalRole {
  VIEWER
  COLLABORATOR
  ADMIN
}

model ClientComment {
  id              String   @id @default(cuid())
  clientId        String
  candidateId     String
  jobId           String
  authorEmail     String
  content         String
  type            CommentType @default(GENERAL)
  rating          Int?     // 1-5 star rating
  isPrivate       Boolean  @default(false)
  requiresResponse Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  client          Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  candidate       Candidate  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job             Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  responses       ClientCommentResponse[]

  @@map("client_comments")
}

enum CommentType {
  GENERAL
  TECHNICAL_FEEDBACK
  CULTURAL_FIT
  INTERVIEW_FEEDBACK
  ASSESSMENT_REVIEW
  NEXT_STEPS
}

model ClientCommentResponse {
  id              String   @id @default(cuid())
  commentId       String
  authorId        String
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  comment         ClientComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  author          User          @relation(fields: [authorId], references: [id])

  @@map("client_comment_responses")
}

model ClientAssessmentRequirement {
  id              String   @id @default(cuid())
  clientId        String
  jobId           String?  // null = default for all jobs
  type            String   // "Technical Coding", "System Design", "Cultural Fit", etc.
  description     String
  isRequired      Boolean  @default(true)
  duration        Int?     // in minutes
  passingScore    Int?     // percentage
  instructions    String?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  job             Job?     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  assessments     CandidateAssessment[]

  @@map("client_assessment_requirements")
}

model CandidateAssessment {
  id                String   @id @default(cuid())
  candidateId       String
  jobId             String
  requirementId     String?  // links to ClientAssessmentRequirement
  type              String
  status            AssessmentStatus @default(NOT_STARTED)
  score             Int?     // percentage
  maxScore          Int?
  notes             String?
  assessorId        String?
  reviewedByClient  Boolean  @default(false)
  clientFeedback    String?
  completedAt       DateTime?
  dueDate           DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  candidate         Candidate    @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job               Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  requirement       ClientAssessmentRequirement? @relation(fields: [requirementId], references: [id])
  assessor          User?        @relation(fields: [assessorId], references: [id])

  @@map("candidate_assessments")
}

model InterviewRequest {
  id              String   @id @default(cuid())
  clientId        String
  candidateId     String
  jobId           String
  requestedBy     String   // client email
  interviewType   String   // "Technical", "Cultural Fit", "Final", etc.
  preferredDates  String   // JSON array of preferred dates
  notes           String?
  priority        InterviewPriority @default(MEDIUM)
  status          InterviewRequestStatus @default(PENDING)
  scheduledDate   DateTime?
  interviewLink   String?
  interviewerId   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  client          Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  candidate       Candidate  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job             Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  interviewer     User?      @relation(fields: [interviewerId], references: [id])

  @@map("interview_requests")
}

enum InterviewPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InterviewRequestStatus {
  PENDING
  APPROVED
  SCHEDULED
  COMPLETED
  CANCELLED
  REJECTED
}

model ClientActivity {
  id              String   @id @default(cuid())
  clientId        String
  actorEmail      String   // who performed the action
  action          String   // "viewed_candidate", "added_comment", "rated_candidate", etc.
  resourceType    String   // "candidate", "job", "assessment", etc.
  resourceId      String
  metadata        String?  // JSON with additional details
  createdAt       DateTime @default(now())

  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("client_activities")
}

model PipelineStage {
  id              String   @id @default(cuid())
  clientId        String?  // null = default stages
  name            String
  description     String?
  order           Int
  color           String   @default("#6B7280")
  isActive        Boolean  @default(true)
  requiresClientAction Boolean @default(false)
  autoAdvance     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  client          Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("pipeline_stages")
}

model ClientNotification {
  id              String   @id @default(cuid())
  clientId        String
  recipientEmail  String
  title           String
  message         String
  type            NotificationType @default(INFO)
  relatedResource String?  // "candidate:123", "job:456", etc.
  actionUrl       String?
  isRead          Boolean  @default(false)
  sentAt          DateTime?
  createdAt       DateTime @default(now())

  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("client_notifications")
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ACTION_REQUIRED
}

model Client {
  id              String   @id @default(cuid())
  name            String
  industry        String?
  contactPerson   String?
  email           String?
  phone           String?
  address         String?
  logoUrl         String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  portalInvitations    ClientPortalInvitation[]
  comments             ClientComment[]
  assessmentRequirements ClientAssessmentRequirement[]
  interviewRequests    InterviewRequest[]
  activities           ClientActivity[]
  stages               PipelineStage[]
  notifications        ClientNotification[]

  @@map("clients")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName       String
  lastName        String
  role            String   @default("RECRUITER")
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  portalInvitations   ClientPortalInvitation[]
  commentResponses    ClientCommentResponse[]
  assessments         CandidateAssessment[]
  interviewRequests   InterviewRequest[]

  @@map("users")
}
