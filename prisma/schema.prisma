generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id                  String           @id @default(cuid())
  firstName           String
  lastName            String
  email               String           @unique
  phone               String?
  country             String?
  city                String?
  state               String?
  postalCode          String?
  timezone            String?
  currentTitle        String?
  summary             String?
  skills              String[]
  experience          Int
  currentCompany      String?
  currentSalary       Float?
  currentSalaryType   SalaryType?
  expectedSalary      Float?
  expectedSalaryType  SalaryType?
  currency            String?          @default("USD")
  noticePeriod        NoticePeriod?
  status              CandidateStatus  @default(NEW)
  availableStartDate  DateTime?
  preferredEmployment EmploymentType[]
  willingToRelocate   Boolean?         @default(false)
  remoteWork          Boolean?         @default(false)
  highestEducation    EducationLevel?
  university          String?
  degree              String?
  graduationYear      Int?
  resumeUrl           String?
  portfolioUrl        String?
  linkedinUrl         String?
  githubUrl           String?
  websiteUrl          String?
  assessmentScore     Float?
  assessmentComments  String?
  techScore           Float?
  communicationScore  Float?
  culturalFitScore    Float?
  source              String?
  referredBy          String?
  recruiterNotes      String?
  profileToken        String?          @unique
  aiSummary           String?          // AI-generated profile summary
  videoInterviewUrl   String?          // One-way video interview link
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  lastContactedAt     DateTime?
  applications        Application[]
  evaluations         Evaluation[]
  interviews          Interview[]
  referrals           Referral[]
  assessments         Assessment[]
  smsMessages         SmsMessage[]
  aiMatches           AIMatch[]

  @@map("candidates")
}

model Job {
  id               String              @id @default(cuid())
  title            String
  description      String
  department       String
  location         String
  language         Language            @default(EN)
  status           JobStatus           @default(DRAFT)
  salaryMin        Float?
  salaryMax        Float?
  salaryCurrency   String?             @default("USD")
  experienceLevel  String?
  employmentType   EmploymentType[]
  benefits         String[]
  requirements     String[]
  responsibilities String[]
  isRemote         Boolean             @default(false)
  publicToken      String?             @unique  // For public job widget
  embedCode        String?             // Embeddable widget code
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  publishedAt      DateTime?
  expiresAt        DateTime?
  applications     Application[]
  interviews       Interview[]
  distributions    JobDistribution[]
  aiMatches        AIMatch[]
  socialPosts      SocialMediaPost[]

  @@map("jobs")
}

model Application {
  id           String            @id @default(cuid())
  candidateId  String
  jobId        String
  status       ApplicationStatus @default(PENDING)
  coverLetter  String?
  cvUrl        String?
  referralCode String?
  source       String?           // Where the application came from
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  candidate    Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job          Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([candidateId, jobId])
  @@map("applications")
}

model Referral {
  id           String     @id @default(cuid())
  candidateId  String
  referrerId   String
  referrerName String
  code         String     @unique
  isUsed       Boolean    @default(false)
  reward       Float?     // Referral bonus amount
  status       ReferralStatus @default(PENDING)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  candidate    Candidate  @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("referrals")
}

model Evaluation {
  id          String    @id @default(cuid())
  candidateId String
  evaluatorId String
  rating      Float
  notes       String?
  criteria    Json?     // Structured evaluation criteria and scores
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("evaluations")
}

model Interview {
  id                String          @id @default(cuid())
  candidateId       String
  jobId             String
  interviewerId     String
  type              InterviewType
  status            InterviewStatus @default(SCHEDULED)
  scheduledAt       DateTime
  duration          Int
  location          String?
  videoInterviewUrl String?
  notes             String?
  rating            Float?
  calendarEventId   String?
  meetingLink       String?         // Video conference link
  dialInDetails     String?         // Phone dial-in info
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  candidate         Candidate       @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job               Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("interviews")
}

model Assessment {
  id          String           @id @default(cuid())
  candidateId String
  type        AssessmentType
  questions   Json             // Assessment questions and structure
  answers     Json?            // Candidate answers
  score       Float?
  maxScore    Float
  status      AssessmentStatus @default(NOT_STARTED)
  startedAt   DateTime?
  completedAt DateTime?
  expiresAt   DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  candidate   Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("assessments")
}

model CalendarIntegration {
  id           String              @id @default(cuid())
  userId       String              @unique
  provider     CalendarProvider
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean             @default(true)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@map("calendar_integrations")
}

model SmsMessage {
  id          String     @id @default(cuid())
  candidateId String
  phoneNumber String
  message     String
  status      SmsStatus  @default(PENDING)
  direction   SmsDirection
  externalId  String?    // Twilio/provider message ID
  errorCode   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  candidate   Candidate  @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("sms_messages")
}

model WorkflowRule {
  id         String   @id @default(cuid())
  name       String
  trigger    String   // Event that triggers the workflow
  conditions Json     // Conditions to check
  actions    Json     // Actions to execute
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("workflow_rules")
}

model JobDistribution {
  id          String               @id @default(cuid())
  jobId       String
  platform    String               // Job board name
  status      DistributionStatus
  externalId  String?              // Job board's internal ID
  postUrl     String?              // URL to the posted job
  cost        Float?               // Cost to post
  postedAt    DateTime?
  expiresAt   DateTime?
  errorCode   String?
  errorMessage String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  job         Job                  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_distributions")
}

model SocialMediaPost {
  id        String            @id @default(cuid())
  jobId     String
  platform  SocialPlatform
  content   String
  status    PostStatus
  postUrl   String?
  postId    String?           // Platform's post ID
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  job       Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("social_media_posts")
}

model AIMatch {
  id          String    @id @default(cuid())
  jobId       String
  candidateId String
  score       Float     // AI matching score (0-100)
  reasoning   String?   // AI explanation for the match
  factors     Json?     // Detailed matching factors
  createdAt   DateTime  @default(now())
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@unique([jobId, candidateId])
  @@map("ai_matches")
}

model Log {
  id        String   @id @default(cuid())
  actor     String?  // User who performed the action
  action    String   // Action performed
  resource  String   // Resource affected
  details   Json?    // Additional details
  level     LogLevel @default(INFO)
  timestamp DateTime @default(now())

  @@map("logs")
}

enum JobStatus {
  DRAFT
  ACTIVE
  PAUSED
  CLOSED
  ARCHIVED
}

enum Language {
  EN
  ES
  FR
  DE
  PT
  IT
  NL
  PL
  RU
  ZH
  JA
  KO
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  INTERVIEW_SCHEDULED
  INTERVIEWED
  OFFER_EXTENDED
  HIRED
  REJECTED
  WITHDRAWN
}

enum InterviewType {
  PHONE_SCREENING
  TECHNICAL
  BEHAVIORAL
  FINAL
  VIDEO_ONE_WAY
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum LogLevel {
  INFO
  WARN
  ERROR
  DEBUG
}

enum CandidateStatus {
  NEW
  ACTIVE
  PASSIVE
  DO_NOT_CONTACT
  BLACKLISTED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
  TEMPORARY
}

enum NoticePeriod {
  IMMEDIATE
  ONE_WEEK
  TWO_WEEKS
  ONE_MONTH
  TWO_MONTHS
  THREE_MONTHS
  SIX_MONTHS
  OTHER
}

enum SalaryType {
  ANNUAL
  MONTHLY
  DAILY
  HOURLY
}

enum EducationLevel {
  HIGH_SCHOOL
  ASSOCIATE
  BACHELOR
  MASTER
  PHD
  CERTIFICATION
  BOOTCAMP
  SELF_TAUGHT
}

enum ReferralStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum AssessmentType {
  TECHNICAL
  PERSONALITY
  COGNITIVE
  SKILLS_BASED
  CUSTOM
}

enum AssessmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  EXPIRED
  CANCELLED
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
  APPLE
}

enum SmsStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  REPLIED
}

enum SmsDirection {
  OUTBOUND
  INBOUND
}

enum DistributionStatus {
  PENDING
  POSTED
  FAILED
  EXPIRED
  REMOVED
}

enum SocialPlatform {
  LINKEDIN
  TWITTER
  FACEBOOK
  INSTAGRAM
}

enum PostStatus {
  DRAFT
  SCHEDULED
  POSTED
  FAILED
  REMOVED
}
