generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id                  String           @id @default(cuid())
  firstName           String
  lastName            String
  email               String           @unique
  phone               String?
  country             String?
  city                String?
  state               String?
  postalCode          String?
  timezone            String?
  currentTitle        String?
  summary             String?
  skills              String[]
  experience          Int
  currentCompany      String?
  currentSalary       Float?
  currentSalaryType   SalaryType?
  expectedSalary      Float?
  expectedSalaryType  SalaryType?
  currency            String?          @default("USD")
  noticePeriod        NoticePeriod?
  status              CandidateStatus  @default(NEW)
  availableStartDate  DateTime?
  preferredEmployment EmploymentType[]
  willingToRelocate   Boolean?         @default(false)
  remoteWork          Boolean?         @default(false)
  highestEducation    EducationLevel?
  university          String?
  degree              String?
  graduationYear      Int?
  resumeUrl           String?
  portfolioUrl        String?
  linkedinUrl         String?
  githubUrl           String?
  websiteUrl          String?
  assessmentScore     Float?
  assessmentComments  String?
  techScore           Float?
  communicationScore  Float?
  culturalFitScore    Float?
  source              String?
  referredBy          String?
  recruiterNotes      String?
  profileToken        String?          @unique
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  lastContactedAt     DateTime?
  applications        Application[]
  evaluations         Evaluation[]
  interviews          Interview[]
  referrals           Referral[]

  @@map("candidates")
}

model Job {
  id           String        @id @default(cuid())
  title        String
  description  String
  department   String
  location     String
  language     Language      @default(EN)
  status       JobStatus     @default(DRAFT)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  interviews   Interview[]

  @@map("jobs")
}

model Application {
  id           String            @id @default(cuid())
  candidateId  String
  jobId        String
  status       ApplicationStatus @default(PENDING)
  coverLetter  String?
  cvUrl        String?
  referralCode String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  candidate    Candidate         @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job          Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([candidateId, jobId])
  @@map("applications")
}

model Referral {
  id           String    @id @default(cuid())
  candidateId  String
  referrerId   String
  referrerName String
  code         String    @unique
  isUsed       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  candidate    Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("referrals")
}

model Evaluation {
  id          String    @id @default(cuid())
  candidateId String
  evaluatorId String
  rating      Float
  notes       String?
  criteria    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("evaluations")
}

model Interview {
  id                String          @id @default(cuid())
  candidateId       String
  jobId             String
  interviewerId     String
  type              InterviewType
  status            InterviewStatus @default(SCHEDULED)
  scheduledAt       DateTime
  duration          Int
  location          String?
  videoInterviewUrl String?
  notes             String?
  rating            Float?
  calendarEventId   String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  candidate         Candidate       @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job               Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("interviews")
}

model WorkflowRule {
  id         String   @id @default(cuid())
  name       String
  trigger    String
  conditions Json
  actions    Json
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("workflow_rules")
}

model Log {
  id        String   @id @default(cuid())
  actor     String?
  action    String
  resource  String
  details   Json?
  level     LogLevel @default(INFO)
  timestamp DateTime @default(now())

  @@map("logs")
}

enum JobStatus {
  DRAFT
  ACTIVE
  PAUSED
  CLOSED
  ARCHIVED
}

enum Language {
  EN
  ES
  FR
  DE
  PT
  IT
  NL
  PL
  RU
  ZH
  JA
  KO
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  INTERVIEW_SCHEDULED
  INTERVIEWED
  OFFER_EXTENDED
  HIRED
  REJECTED
  WITHDRAWN
}

enum InterviewType {
  PHONE_SCREENING
  TECHNICAL
  BEHAVIORAL
  FINAL
  VIDEO_ONE_WAY
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum LogLevel {
  INFO
  WARN
  ERROR
  DEBUG
}

enum CandidateStatus {
  NEW
  ACTIVE
  PASSIVE
  DO_NOT_CONTACT
  BLACKLISTED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
  TEMPORARY
}

enum NoticePeriod {
  IMMEDIATE
  ONE_WEEK
  TWO_WEEKS
  ONE_MONTH
  TWO_MONTHS
  THREE_MONTHS
  SIX_MONTHS
  OTHER
}

enum SalaryType {
  ANNUAL
  MONTHLY
  DAILY
  HOURLY
}

enum EducationLevel {
  HIGH_SCHOOL
  ASSOCIATE
  BACHELOR
  MASTER
  PHD
  CERTIFICATION
  BOOTCAMP
  SELF_TAUGHT
}
